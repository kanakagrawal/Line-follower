
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000340  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024f  00000000  00000000  000003fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014f  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000105  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000114  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016d  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000225  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 93 01 	call	0x326	; 0x326 <main>
  7a:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_putchar>:
void LCD_puthex(const char data);

char hstring[17] = "0123456789ABCDEF"; //used by LCD_puthex

void LCD_putchar(unsigned char data)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
	//PortD is output
	DDRD = 0xFF;
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	//put data on bus
	PORTD = data;
  98:	82 e3       	ldi	r24, 0x32	; 50
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	29 81       	ldd	r18, Y+1	; 0x01
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	//RW low, E low
	PORTB &= ~((1<<LCD_RW)|(1<<LCD_E));
  a2:	88 e3       	ldi	r24, 0x38	; 56
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	28 e3       	ldi	r18, 0x38	; 56
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	29 7f       	andi	r18, 0xF9	; 249
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	//RS high, strobe E
	PORTB |= ((1<<LCD_RS)|(1<<LCD_E));
  b4:	88 e3       	ldi	r24, 0x38	; 56
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	28 e3       	ldi	r18, 0x38	; 56
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	25 60       	ori	r18, 0x05	; 5
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	//RS low again, E low (belongs to strobe)
	PORTB &= ~((1<<LCD_RS)|(1<<LCD_E));
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	28 e3       	ldi	r18, 0x38	; 56
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	2a 7f       	andi	r18, 0xFA	; 250
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	//release bus
	DDRD = 0;
  e0:	81 e3       	ldi	r24, 0x31	; 49
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	10 82       	st	Z, r1
}
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <LCD_getaddr>:

//LCD_getaddress reads the address counter and busy flag. For the address only,
//mask off bit7 of the return value.
char LCD_getaddr(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	1f 92       	push	r1
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	//make var for the return value
	char address;
	//PortD is input
	DDRD = 0;
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
	//RW high, strobe enable
	PORTB |= ((1<<LCD_RW)|(1<<LCD_E));
 102:	88 e3       	ldi	r24, 0x38	; 56
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	28 e3       	ldi	r18, 0x38	; 56
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	26 60       	ori	r18, 0x06	; 6
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	asm volatile ("nop");
 114:	00 00       	nop
	asm volatile ("nop");
 116:	00 00       	nop
	//while E is high, get data from LCD
	address = PIND;
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	89 83       	std	Y+1, r24	; 0x01
	//reset RW to low, E low (for strobe)
	PORTB &= ~((1<<LCD_RW)|(1<<LCD_E));
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	28 e3       	ldi	r18, 0x38	; 56
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	29 7f       	andi	r18, 0xF9	; 249
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	//return address and busy flag
	return address;
 134:	89 81       	ldd	r24, Y+1	; 0x01
}
 136:	0f 90       	pop	r0
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LCD_wait>:

//LCD_wait reads the address counter (which contains the busy flag) and loops until
//the busy flag is cleared.
void LCD_wait(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	//get address and busy flag
	//and loop until busy flag cleared
	while((LCD_getaddr() & 0x80) == 0x80);
 146:	00 00       	nop
 148:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_getaddr>
 14c:	88 23       	and	r24, r24
 14e:	e4 f3       	brlt	.-8      	; 0x148 <LCD_wait+0xa>
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_command>:

//LCD_command works EXACTLY like LCD_putchar, but takes RS low for accessing the command reg
//see LCD_putchar for details on the code
void LCD_command(unsigned char command)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	89 83       	std	Y+1, r24	; 0x01
	DDRD = 0xFF;
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	PORTD = command;
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	PORTB &= ~((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	28 e3       	ldi	r18, 0x38	; 56
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	28 7f       	andi	r18, 0xF8	; 248
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	PORTB |= (1<<LCD_E);
 188:	88 e3       	ldi	r24, 0x38	; 56
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	28 e3       	ldi	r18, 0x38	; 56
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	24 60       	ori	r18, 0x04	; 4
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTB &= ~(1<<LCD_E);
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	28 e3       	ldi	r18, 0x38	; 56
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2b 7f       	andi	r18, 0xFB	; 251
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	DDRD = 0;
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	10 82       	st	Z, r1
}
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_init>:
8 bit mode, 5*7 font, 2 lines (also for 4 lines)
auto-inc cursor after write and read
cursor and didsplay on, cursor blinking.
*/
void LCD_init(void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	28 97       	sbiw	r28, 0x08	; 8
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	//setup the LCD control signals on PORTB
	DDRB |= ((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
 1d8:	87 e3       	ldi	r24, 0x37	; 55
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	27 e3       	ldi	r18, 0x37	; 55
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	27 60       	ori	r18, 0x07	; 7
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
	PORTB = 0x00;
 1ea:	88 e3       	ldi	r24, 0x38	; 56
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	10 82       	st	Z, r1
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_init+0x3a>
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
	//if called right after power-up, we'll have to wait a bit (fine-tune for faster execution)
	_delay_loop_2(0xFFFF);
	//tell the LCD that it's used in 8-bit mode 3 times, each with a delay inbetween.
	LCD_command(0x30);
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	9f ef       	ldi	r25, 0xFF	; 255
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	8b 83       	std	Y+3, r24	; 0x03
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_init+0x54>
 21c:	9c 83       	std	Y+4, r25	; 0x04
 21e:	8b 83       	std	Y+3, r24	; 0x03
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	9e 83       	std	Y+6, r25	; 0x06
 22c:	8d 83       	std	Y+5, r24	; 0x05
 22e:	8d 81       	ldd	r24, Y+5	; 0x05
 230:	9e 81       	ldd	r25, Y+6	; 0x06
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_init+0x6e>
 236:	9e 83       	std	Y+6, r25	; 0x06
 238:	8d 83       	std	Y+5, r24	; 0x05
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	9f ef       	ldi	r25, 0xFF	; 255
 244:	98 87       	std	Y+8, r25	; 0x08
 246:	8f 83       	std	Y+7, r24	; 0x07
 248:	8f 81       	ldd	r24, Y+7	; 0x07
 24a:	98 85       	ldd	r25, Y+8	; 0x08
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_init+0x88>
 250:	98 87       	std	Y+8, r25	; 0x08
 252:	8f 83       	std	Y+7, r24	; 0x07
	_delay_loop_2(0xFFFF);
	//now: 8 bit interface, 5*7 font, 2 lines.
	LCD_command(0x38);
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
	//wait until command finished
	LCD_wait();
 25a:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//display on, cursor on (blinking)
	LCD_command(0x0F);
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
	LCD_wait();
 264:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//now clear the display, cursor home
	LCD_command(0x01);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
	LCD_wait();
 26e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//cursor auto-inc
	LCD_command(0x06);
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_command>
}
 278:	28 96       	adiw	r28, 0x08	; 8
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <LCD_write>:

//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <LCD_write+0x6>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 298:	0d c0       	rjmp	.+26     	; 0x2b4 <LCD_write+0x2a>
	{
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
 29a:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	9c 01       	movw	r18, r24
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	3a 83       	std	Y+2, r19	; 0x02
 2aa:	29 83       	std	Y+1, r18	; 0x01
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	88 23       	and	r24, r24
 2be:	69 f7       	brne	.-38     	; 0x29a <LCD_write+0x10>
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
	}
}
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_puthex>:

void LCD_puthex(const char data)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	1f 92       	push	r1
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	89 83       	std	Y+1, r24	; 0x01
	//wait for the LCD to be ready
	LCD_wait();
 2d6:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//print '0'
	LCD_putchar('0');
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 2e0:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//print 'x'
	LCD_putchar('x');
 2e4:	88 e7       	ldi	r24, 0x78	; 120
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 2ea:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//print high nibble as hex
	LCD_putchar(hstring[data>>4]);
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	82 95       	swap	r24
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	88 2f       	mov	r24, r24
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	80 5a       	subi	r24, 0xA0	; 160
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	fc 01       	movw	r30, r24
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
	LCD_wait();
 304:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_wait>
	//print low nibble as hex
	LCD_putchar(hstring[data & 0x0F]);
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	99 27       	eor	r25, r25
 312:	80 5a       	subi	r24, 0xA0	; 160
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
}
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <main>:
#include <avr/io.h>
#include <util/delay.h>

#include "lcd.h"

int main(){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 32e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_init>
	LCD_write("hello");
 332:	81 e7       	ldi	r24, 0x71	; 113
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_write>
	while(1);
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x14>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
