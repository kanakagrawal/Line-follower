
hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000572  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000572  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000214  00000000  00000000  00000617  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cd  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012d  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011d  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000047  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#define F_CPU 1000000
#include<util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	aa 97       	sbiw	r28, 0x2a	; 42
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	//define
	DDRA = 0b00000111;
  80:	8a e3       	ldi	r24, 0x3A	; 58
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	27 e0       	ldi	r18, 0x07	; 7
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
	while(1){
	PORTA = 0b00000001;
  8a:	8b e3       	ldi	r24, 0x3B	; 59
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	aa ef       	ldi	r26, 0xFA	; 250
  9a:	b3 e4       	ldi	r27, 0x43	; 67
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	9a 83       	std	Y+2, r25	; 0x02
  a0:	ab 83       	std	Y+3, r26	; 0x03
  a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	4a e7       	ldi	r20, 0x7A	; 122
  aa:	53 e4       	ldi	r21, 0x43	; 67
  ac:	69 81       	ldd	r22, Y+1	; 0x01
  ae:	7a 81       	ldd	r23, Y+2	; 0x02
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
  bc:	8d 83       	std	Y+5, r24	; 0x05
  be:	9e 83       	std	Y+6, r25	; 0x06
  c0:	af 83       	std	Y+7, r26	; 0x07
  c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	40 e8       	ldi	r20, 0x80	; 128
  ca:	5f e3       	ldi	r21, 0x3F	; 63
  cc:	6d 81       	ldd	r22, Y+5	; 0x05
  ce:	7e 81       	ldd	r23, Y+6	; 0x06
  d0:	8f 81       	ldd	r24, Y+7	; 0x07
  d2:	98 85       	ldd	r25, Y+8	; 0x08
  d4:	0e 94 ab 01 	call	0x356	; 0x356 <__cmpsf2>
  d8:	88 23       	and	r24, r24
  da:	2c f4       	brge	.+10     	; 0xe6 <main+0x7a>
		__ticks = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9a 87       	std	Y+10, r25	; 0x0a
  e2:	89 87       	std	Y+9, r24	; 0x09
  e4:	3f c0       	rjmp	.+126    	; 0x164 <main+0xf8>
	else if (__tmp > 65535)
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	3f ef       	ldi	r19, 0xFF	; 255
  ea:	4f e7       	ldi	r20, 0x7F	; 127
  ec:	57 e4       	ldi	r21, 0x47	; 71
  ee:	6d 81       	ldd	r22, Y+5	; 0x05
  f0:	7e 81       	ldd	r23, Y+6	; 0x06
  f2:	8f 81       	ldd	r24, Y+7	; 0x07
  f4:	98 85       	ldd	r25, Y+8	; 0x08
  f6:	0e 94 28 02 	call	0x450	; 0x450 <__gesf2>
  fa:	18 16       	cp	r1, r24
  fc:	4c f5       	brge	.+82     	; 0x150 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e2       	ldi	r20, 0x20	; 32
 104:	51 e4       	ldi	r21, 0x41	; 65
 106:	69 81       	ldd	r22, Y+1	; 0x01
 108:	7a 81       	ldd	r23, Y+2	; 0x02
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	9c 81       	ldd	r25, Y+4	; 0x04
 10e:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 112:	dc 01       	movw	r26, r24
 114:	cb 01       	movw	r24, r22
 116:	bc 01       	movw	r22, r24
 118:	cd 01       	movw	r24, r26
 11a:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	9a 87       	std	Y+10, r25	; 0x0a
 124:	89 87       	std	Y+9, r24	; 0x09
 126:	0f c0       	rjmp	.+30     	; 0x146 <main+0xda>
 128:	89 e1       	ldi	r24, 0x19	; 25
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	9c 87       	std	Y+12, r25	; 0x0c
 12e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 130:	8b 85       	ldd	r24, Y+11	; 0x0b
 132:	9c 85       	ldd	r25, Y+12	; 0x0c
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xc8>
 138:	9c 87       	std	Y+12, r25	; 0x0c
 13a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	9a 87       	std	Y+10, r25	; 0x0a
 144:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	89 85       	ldd	r24, Y+9	; 0x09
 148:	9a 85       	ldd	r25, Y+10	; 0x0a
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	69 f7       	brne	.-38     	; 0x128 <main+0xbc>
 14e:	14 c0       	rjmp	.+40     	; 0x178 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 150:	6d 81       	ldd	r22, Y+5	; 0x05
 152:	7e 81       	ldd	r23, Y+6	; 0x06
 154:	8f 81       	ldd	r24, Y+7	; 0x07
 156:	98 85       	ldd	r25, Y+8	; 0x08
 158:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 15c:	dc 01       	movw	r26, r24
 15e:	cb 01       	movw	r24, r22
 160:	9a 87       	std	Y+10, r25	; 0x0a
 162:	89 87       	std	Y+9, r24	; 0x09
 164:	89 85       	ldd	r24, Y+9	; 0x09
 166:	9a 85       	ldd	r25, Y+10	; 0x0a
 168:	9e 87       	std	Y+14, r25	; 0x0e
 16a:	8d 87       	std	Y+13, r24	; 0x0d
 16c:	8d 85       	ldd	r24, Y+13	; 0x0d
 16e:	9e 85       	ldd	r25, Y+14	; 0x0e
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x104>
 174:	9e 87       	std	Y+14, r25	; 0x0e
 176:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(500);
	PORTA = 0b00000010;
 178:	8b e3       	ldi	r24, 0x3B	; 59
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	22 e0       	ldi	r18, 0x02	; 2
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	aa ef       	ldi	r26, 0xFA	; 250
 188:	b3 e4       	ldi	r27, 0x43	; 67
 18a:	8f 87       	std	Y+15, r24	; 0x0f
 18c:	98 8b       	std	Y+16, r25	; 0x10
 18e:	a9 8b       	std	Y+17, r26	; 0x11
 190:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	4a e7       	ldi	r20, 0x7A	; 122
 198:	53 e4       	ldi	r21, 0x43	; 67
 19a:	6f 85       	ldd	r22, Y+15	; 0x0f
 19c:	78 89       	ldd	r23, Y+16	; 0x10
 19e:	89 89       	ldd	r24, Y+17	; 0x11
 1a0:	9a 89       	ldd	r25, Y+18	; 0x12
 1a2:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 1a6:	dc 01       	movw	r26, r24
 1a8:	cb 01       	movw	r24, r22
 1aa:	8b 8b       	std	Y+19, r24	; 0x13
 1ac:	9c 8b       	std	Y+20, r25	; 0x14
 1ae:	ad 8b       	std	Y+21, r26	; 0x15
 1b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e8       	ldi	r20, 0x80	; 128
 1b8:	5f e3       	ldi	r21, 0x3F	; 63
 1ba:	6b 89       	ldd	r22, Y+19	; 0x13
 1bc:	7c 89       	ldd	r23, Y+20	; 0x14
 1be:	8d 89       	ldd	r24, Y+21	; 0x15
 1c0:	9e 89       	ldd	r25, Y+22	; 0x16
 1c2:	0e 94 ab 01 	call	0x356	; 0x356 <__cmpsf2>
 1c6:	88 23       	and	r24, r24
 1c8:	2c f4       	brge	.+10     	; 0x1d4 <main+0x168>
		__ticks = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	98 8f       	std	Y+24, r25	; 0x18
 1d0:	8f 8b       	std	Y+23, r24	; 0x17
 1d2:	3f c0       	rjmp	.+126    	; 0x252 <main+0x1e6>
	else if (__tmp > 65535)
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	3f ef       	ldi	r19, 0xFF	; 255
 1d8:	4f e7       	ldi	r20, 0x7F	; 127
 1da:	57 e4       	ldi	r21, 0x47	; 71
 1dc:	6b 89       	ldd	r22, Y+19	; 0x13
 1de:	7c 89       	ldd	r23, Y+20	; 0x14
 1e0:	8d 89       	ldd	r24, Y+21	; 0x15
 1e2:	9e 89       	ldd	r25, Y+22	; 0x16
 1e4:	0e 94 28 02 	call	0x450	; 0x450 <__gesf2>
 1e8:	18 16       	cp	r1, r24
 1ea:	4c f5       	brge	.+82     	; 0x23e <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e2       	ldi	r20, 0x20	; 32
 1f2:	51 e4       	ldi	r21, 0x41	; 65
 1f4:	6f 85       	ldd	r22, Y+15	; 0x0f
 1f6:	78 89       	ldd	r23, Y+16	; 0x10
 1f8:	89 89       	ldd	r24, Y+17	; 0x11
 1fa:	9a 89       	ldd	r25, Y+18	; 0x12
 1fc:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 200:	dc 01       	movw	r26, r24
 202:	cb 01       	movw	r24, r22
 204:	bc 01       	movw	r22, r24
 206:	cd 01       	movw	r24, r26
 208:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 20c:	dc 01       	movw	r26, r24
 20e:	cb 01       	movw	r24, r22
 210:	98 8f       	std	Y+24, r25	; 0x18
 212:	8f 8b       	std	Y+23, r24	; 0x17
 214:	0f c0       	rjmp	.+30     	; 0x234 <main+0x1c8>
 216:	89 e1       	ldi	r24, 0x19	; 25
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9a 8f       	std	Y+26, r25	; 0x1a
 21c:	89 8f       	std	Y+25, r24	; 0x19
 21e:	89 8d       	ldd	r24, Y+25	; 0x19
 220:	9a 8d       	ldd	r25, Y+26	; 0x1a
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x1b6>
 226:	9a 8f       	std	Y+26, r25	; 0x1a
 228:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	8f 89       	ldd	r24, Y+23	; 0x17
 22c:	98 8d       	ldd	r25, Y+24	; 0x18
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	98 8f       	std	Y+24, r25	; 0x18
 232:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 234:	8f 89       	ldd	r24, Y+23	; 0x17
 236:	98 8d       	ldd	r25, Y+24	; 0x18
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	69 f7       	brne	.-38     	; 0x216 <main+0x1aa>
 23c:	14 c0       	rjmp	.+40     	; 0x266 <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 23e:	6b 89       	ldd	r22, Y+19	; 0x13
 240:	7c 89       	ldd	r23, Y+20	; 0x14
 242:	8d 89       	ldd	r24, Y+21	; 0x15
 244:	9e 89       	ldd	r25, Y+22	; 0x16
 246:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 24a:	dc 01       	movw	r26, r24
 24c:	cb 01       	movw	r24, r22
 24e:	98 8f       	std	Y+24, r25	; 0x18
 250:	8f 8b       	std	Y+23, r24	; 0x17
 252:	8f 89       	ldd	r24, Y+23	; 0x17
 254:	98 8d       	ldd	r25, Y+24	; 0x18
 256:	9c 8f       	std	Y+28, r25	; 0x1c
 258:	8b 8f       	std	Y+27, r24	; 0x1b
 25a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 25c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x1f2>
 262:	9c 8f       	std	Y+28, r25	; 0x1c
 264:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(500);
	PORTA = 0b00000100;
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	24 e0       	ldi	r18, 0x04	; 4
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	aa ef       	ldi	r26, 0xFA	; 250
 276:	b3 e4       	ldi	r27, 0x43	; 67
 278:	8d 8f       	std	Y+29, r24	; 0x1d
 27a:	9e 8f       	std	Y+30, r25	; 0x1e
 27c:	af 8f       	std	Y+31, r26	; 0x1f
 27e:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	4a e7       	ldi	r20, 0x7A	; 122
 286:	53 e4       	ldi	r21, 0x43	; 67
 288:	6d 8d       	ldd	r22, Y+29	; 0x1d
 28a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 28c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 28e:	98 a1       	ldd	r25, Y+32	; 0x20
 290:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 294:	dc 01       	movw	r26, r24
 296:	cb 01       	movw	r24, r22
 298:	89 a3       	std	Y+33, r24	; 0x21
 29a:	9a a3       	std	Y+34, r25	; 0x22
 29c:	ab a3       	std	Y+35, r26	; 0x23
 29e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e8       	ldi	r20, 0x80	; 128
 2a6:	5f e3       	ldi	r21, 0x3F	; 63
 2a8:	69 a1       	ldd	r22, Y+33	; 0x21
 2aa:	7a a1       	ldd	r23, Y+34	; 0x22
 2ac:	8b a1       	ldd	r24, Y+35	; 0x23
 2ae:	9c a1       	ldd	r25, Y+36	; 0x24
 2b0:	0e 94 ab 01 	call	0x356	; 0x356 <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	2c f4       	brge	.+10     	; 0x2c2 <main+0x256>
		__ticks = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9e a3       	std	Y+38, r25	; 0x26
 2be:	8d a3       	std	Y+37, r24	; 0x25
 2c0:	3f c0       	rjmp	.+126    	; 0x340 <main+0x2d4>
	else if (__tmp > 65535)
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	69 a1       	ldd	r22, Y+33	; 0x21
 2cc:	7a a1       	ldd	r23, Y+34	; 0x22
 2ce:	8b a1       	ldd	r24, Y+35	; 0x23
 2d0:	9c a1       	ldd	r25, Y+36	; 0x24
 2d2:	0e 94 28 02 	call	0x450	; 0x450 <__gesf2>
 2d6:	18 16       	cp	r1, r24
 2d8:	4c f5       	brge	.+82     	; 0x32c <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e2       	ldi	r20, 0x20	; 32
 2e0:	51 e4       	ldi	r21, 0x41	; 65
 2e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
 2e4:	7e 8d       	ldd	r23, Y+30	; 0x1e
 2e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2e8:	98 a1       	ldd	r25, Y+32	; 0x20
 2ea:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 2ee:	dc 01       	movw	r26, r24
 2f0:	cb 01       	movw	r24, r22
 2f2:	bc 01       	movw	r22, r24
 2f4:	cd 01       	movw	r24, r26
 2f6:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 2fa:	dc 01       	movw	r26, r24
 2fc:	cb 01       	movw	r24, r22
 2fe:	9e a3       	std	Y+38, r25	; 0x26
 300:	8d a3       	std	Y+37, r24	; 0x25
 302:	0f c0       	rjmp	.+30     	; 0x322 <main+0x2b6>
 304:	89 e1       	ldi	r24, 0x19	; 25
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	98 a7       	std	Y+40, r25	; 0x28
 30a:	8f a3       	std	Y+39, r24	; 0x27
 30c:	8f a1       	ldd	r24, Y+39	; 0x27
 30e:	98 a5       	ldd	r25, Y+40	; 0x28
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x2a4>
 314:	98 a7       	std	Y+40, r25	; 0x28
 316:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 318:	8d a1       	ldd	r24, Y+37	; 0x25
 31a:	9e a1       	ldd	r25, Y+38	; 0x26
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	9e a3       	std	Y+38, r25	; 0x26
 320:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 322:	8d a1       	ldd	r24, Y+37	; 0x25
 324:	9e a1       	ldd	r25, Y+38	; 0x26
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	69 f7       	brne	.-38     	; 0x304 <main+0x298>
	_delay_ms(500);
}
 32a:	af ce       	rjmp	.-674    	; 0x8a <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 32c:	69 a1       	ldd	r22, Y+33	; 0x21
 32e:	7a a1       	ldd	r23, Y+34	; 0x22
 330:	8b a1       	ldd	r24, Y+35	; 0x23
 332:	9c a1       	ldd	r25, Y+36	; 0x24
 334:	0e 94 af 01 	call	0x35e	; 0x35e <__fixunssfsi>
 338:	dc 01       	movw	r26, r24
 33a:	cb 01       	movw	r24, r22
 33c:	9e a3       	std	Y+38, r25	; 0x26
 33e:	8d a3       	std	Y+37, r24	; 0x25
 340:	8d a1       	ldd	r24, Y+37	; 0x25
 342:	9e a1       	ldd	r25, Y+38	; 0x26
 344:	9a a7       	std	Y+42, r25	; 0x2a
 346:	89 a7       	std	Y+41, r24	; 0x29
 348:	89 a5       	ldd	r24, Y+41	; 0x29
 34a:	9a a5       	ldd	r25, Y+42	; 0x2a
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x2e0>
 350:	9a a7       	std	Y+42, r25	; 0x2a
 352:	89 a7       	std	Y+41, r24	; 0x29
 354:	9a ce       	rjmp	.-716    	; 0x8a <main+0x1e>

00000356 <__cmpsf2>:
 356:	2f d0       	rcall	.+94     	; 0x3b6 <__fp_cmp>
 358:	08 f4       	brcc	.+2      	; 0x35c <__cmpsf2+0x6>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	08 95       	ret

0000035e <__fixunssfsi>:
 35e:	57 d0       	rcall	.+174    	; 0x40e <__fp_splitA>
 360:	88 f0       	brcs	.+34     	; 0x384 <__fixunssfsi+0x26>
 362:	9f 57       	subi	r25, 0x7F	; 127
 364:	90 f0       	brcs	.+36     	; 0x38a <__fixunssfsi+0x2c>
 366:	b9 2f       	mov	r27, r25
 368:	99 27       	eor	r25, r25
 36a:	b7 51       	subi	r27, 0x17	; 23
 36c:	a0 f0       	brcs	.+40     	; 0x396 <__fixunssfsi+0x38>
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <__fixunssfsi+0x46>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	1a f0       	brmi	.+6      	; 0x380 <__fixunssfsi+0x22>
 37a:	ba 95       	dec	r27
 37c:	c9 f7       	brne	.-14     	; 0x370 <__fixunssfsi+0x12>
 37e:	12 c0       	rjmp	.+36     	; 0x3a4 <__fixunssfsi+0x46>
 380:	b1 30       	cpi	r27, 0x01	; 1
 382:	81 f0       	breq	.+32     	; 0x3a4 <__fixunssfsi+0x46>
 384:	5e d0       	rcall	.+188    	; 0x442 <__fp_zero>
 386:	b1 e0       	ldi	r27, 0x01	; 1
 388:	08 95       	ret
 38a:	5b c0       	rjmp	.+182    	; 0x442 <__fp_zero>
 38c:	67 2f       	mov	r22, r23
 38e:	78 2f       	mov	r23, r24
 390:	88 27       	eor	r24, r24
 392:	b8 5f       	subi	r27, 0xF8	; 248
 394:	39 f0       	breq	.+14     	; 0x3a4 <__fixunssfsi+0x46>
 396:	b9 3f       	cpi	r27, 0xF9	; 249
 398:	cc f3       	brlt	.-14     	; 0x38c <__fixunssfsi+0x2e>
 39a:	86 95       	lsr	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b3 95       	inc	r27
 3a2:	d9 f7       	brne	.-10     	; 0x39a <__fixunssfsi+0x3c>
 3a4:	3e f4       	brtc	.+14     	; 0x3b4 <__fixunssfsi+0x56>
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__fp_cmp>:
 3b6:	99 0f       	add	r25, r25
 3b8:	00 08       	sbc	r0, r0
 3ba:	55 0f       	add	r21, r21
 3bc:	aa 0b       	sbc	r26, r26
 3be:	e0 e8       	ldi	r30, 0x80	; 128
 3c0:	fe ef       	ldi	r31, 0xFE	; 254
 3c2:	16 16       	cp	r1, r22
 3c4:	17 06       	cpc	r1, r23
 3c6:	e8 07       	cpc	r30, r24
 3c8:	f9 07       	cpc	r31, r25
 3ca:	c0 f0       	brcs	.+48     	; 0x3fc <__fp_cmp+0x46>
 3cc:	12 16       	cp	r1, r18
 3ce:	13 06       	cpc	r1, r19
 3d0:	e4 07       	cpc	r30, r20
 3d2:	f5 07       	cpc	r31, r21
 3d4:	98 f0       	brcs	.+38     	; 0x3fc <__fp_cmp+0x46>
 3d6:	62 1b       	sub	r22, r18
 3d8:	73 0b       	sbc	r23, r19
 3da:	84 0b       	sbc	r24, r20
 3dc:	95 0b       	sbc	r25, r21
 3de:	39 f4       	brne	.+14     	; 0x3ee <__fp_cmp+0x38>
 3e0:	0a 26       	eor	r0, r26
 3e2:	61 f0       	breq	.+24     	; 0x3fc <__fp_cmp+0x46>
 3e4:	23 2b       	or	r18, r19
 3e6:	24 2b       	or	r18, r20
 3e8:	25 2b       	or	r18, r21
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <__fp_cmp+0x3e>
 3ec:	08 95       	ret
 3ee:	0a 26       	eor	r0, r26
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <__fp_cmp+0x3e>
 3f2:	a1 40       	sbci	r26, 0x01	; 1
 3f4:	a6 95       	lsr	r26
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	81 1d       	adc	r24, r1
 3fa:	81 1d       	adc	r24, r1
 3fc:	08 95       	ret

000003fe <__fp_split3>:
 3fe:	57 fd       	sbrc	r21, 7
 400:	90 58       	subi	r25, 0x80	; 128
 402:	44 0f       	add	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	59 f0       	breq	.+22     	; 0x41e <__fp_splitA+0x10>
 408:	5f 3f       	cpi	r21, 0xFF	; 255
 40a:	71 f0       	breq	.+28     	; 0x428 <__fp_splitA+0x1a>
 40c:	47 95       	ror	r20

0000040e <__fp_splitA>:
 40e:	88 0f       	add	r24, r24
 410:	97 fb       	bst	r25, 7
 412:	99 1f       	adc	r25, r25
 414:	61 f0       	breq	.+24     	; 0x42e <__fp_splitA+0x20>
 416:	9f 3f       	cpi	r25, 0xFF	; 255
 418:	79 f0       	breq	.+30     	; 0x438 <__fp_splitA+0x2a>
 41a:	87 95       	ror	r24
 41c:	08 95       	ret
 41e:	12 16       	cp	r1, r18
 420:	13 06       	cpc	r1, r19
 422:	14 06       	cpc	r1, r20
 424:	55 1f       	adc	r21, r21
 426:	f2 cf       	rjmp	.-28     	; 0x40c <__fp_split3+0xe>
 428:	46 95       	lsr	r20
 42a:	f1 df       	rcall	.-30     	; 0x40e <__fp_splitA>
 42c:	08 c0       	rjmp	.+16     	; 0x43e <__fp_splitA+0x30>
 42e:	16 16       	cp	r1, r22
 430:	17 06       	cpc	r1, r23
 432:	18 06       	cpc	r1, r24
 434:	99 1f       	adc	r25, r25
 436:	f1 cf       	rjmp	.-30     	; 0x41a <__fp_splitA+0xc>
 438:	86 95       	lsr	r24
 43a:	71 05       	cpc	r23, r1
 43c:	61 05       	cpc	r22, r1
 43e:	08 94       	sec
 440:	08 95       	ret

00000442 <__fp_zero>:
 442:	e8 94       	clt

00000444 <__fp_szero>:
 444:	bb 27       	eor	r27, r27
 446:	66 27       	eor	r22, r22
 448:	77 27       	eor	r23, r23
 44a:	cb 01       	movw	r24, r22
 44c:	97 f9       	bld	r25, 7
 44e:	08 95       	ret

00000450 <__gesf2>:
 450:	b2 df       	rcall	.-156    	; 0x3b6 <__fp_cmp>
 452:	08 f4       	brcc	.+2      	; 0x456 <__gesf2+0x6>
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	08 95       	ret

00000458 <__mulsf3>:
 458:	0b d0       	rcall	.+22     	; 0x470 <__mulsf3x>
 45a:	78 c0       	rjmp	.+240    	; 0x54c <__fp_round>
 45c:	69 d0       	rcall	.+210    	; 0x530 <__fp_pscA>
 45e:	28 f0       	brcs	.+10     	; 0x46a <__stack+0xb>
 460:	6e d0       	rcall	.+220    	; 0x53e <__fp_pscB>
 462:	18 f0       	brcs	.+6      	; 0x46a <__stack+0xb>
 464:	95 23       	and	r25, r21
 466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
 468:	5a c0       	rjmp	.+180    	; 0x51e <__fp_inf>
 46a:	5f c0       	rjmp	.+190    	; 0x52a <__fp_nan>
 46c:	11 24       	eor	r1, r1
 46e:	ea cf       	rjmp	.-44     	; 0x444 <__fp_szero>

00000470 <__mulsf3x>:
 470:	c6 df       	rcall	.-116    	; 0x3fe <__fp_split3>
 472:	a0 f3       	brcs	.-24     	; 0x45c <__mulsf3+0x4>

00000474 <__mulsf3_pse>:
 474:	95 9f       	mul	r25, r21
 476:	d1 f3       	breq	.-12     	; 0x46c <__stack+0xd>
 478:	95 0f       	add	r25, r21
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	55 1f       	adc	r21, r21
 47e:	62 9f       	mul	r22, r18
 480:	f0 01       	movw	r30, r0
 482:	72 9f       	mul	r23, r18
 484:	bb 27       	eor	r27, r27
 486:	f0 0d       	add	r31, r0
 488:	b1 1d       	adc	r27, r1
 48a:	63 9f       	mul	r22, r19
 48c:	aa 27       	eor	r26, r26
 48e:	f0 0d       	add	r31, r0
 490:	b1 1d       	adc	r27, r1
 492:	aa 1f       	adc	r26, r26
 494:	64 9f       	mul	r22, r20
 496:	66 27       	eor	r22, r22
 498:	b0 0d       	add	r27, r0
 49a:	a1 1d       	adc	r26, r1
 49c:	66 1f       	adc	r22, r22
 49e:	82 9f       	mul	r24, r18
 4a0:	22 27       	eor	r18, r18
 4a2:	b0 0d       	add	r27, r0
 4a4:	a1 1d       	adc	r26, r1
 4a6:	62 1f       	adc	r22, r18
 4a8:	73 9f       	mul	r23, r19
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	62 1f       	adc	r22, r18
 4b0:	83 9f       	mul	r24, r19
 4b2:	a0 0d       	add	r26, r0
 4b4:	61 1d       	adc	r22, r1
 4b6:	22 1f       	adc	r18, r18
 4b8:	74 9f       	mul	r23, r20
 4ba:	33 27       	eor	r19, r19
 4bc:	a0 0d       	add	r26, r0
 4be:	61 1d       	adc	r22, r1
 4c0:	23 1f       	adc	r18, r19
 4c2:	84 9f       	mul	r24, r20
 4c4:	60 0d       	add	r22, r0
 4c6:	21 1d       	adc	r18, r1
 4c8:	82 2f       	mov	r24, r18
 4ca:	76 2f       	mov	r23, r22
 4cc:	6a 2f       	mov	r22, r26
 4ce:	11 24       	eor	r1, r1
 4d0:	9f 57       	subi	r25, 0x7F	; 127
 4d2:	50 40       	sbci	r21, 0x00	; 0
 4d4:	8a f0       	brmi	.+34     	; 0x4f8 <__mulsf3_pse+0x84>
 4d6:	e1 f0       	breq	.+56     	; 0x510 <__mulsf3_pse+0x9c>
 4d8:	88 23       	and	r24, r24
 4da:	4a f0       	brmi	.+18     	; 0x4ee <__mulsf3_pse+0x7a>
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	bb 1f       	adc	r27, r27
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__mulsf3_pse+0x64>
 4ee:	9e 3f       	cpi	r25, 0xFE	; 254
 4f0:	51 05       	cpc	r21, r1
 4f2:	70 f0       	brcs	.+28     	; 0x510 <__mulsf3_pse+0x9c>
 4f4:	14 c0       	rjmp	.+40     	; 0x51e <__fp_inf>
 4f6:	a6 cf       	rjmp	.-180    	; 0x444 <__fp_szero>
 4f8:	5f 3f       	cpi	r21, 0xFF	; 255
 4fa:	ec f3       	brlt	.-6      	; 0x4f6 <__mulsf3_pse+0x82>
 4fc:	98 3e       	cpi	r25, 0xE8	; 232
 4fe:	dc f3       	brlt	.-10     	; 0x4f6 <__mulsf3_pse+0x82>
 500:	86 95       	lsr	r24
 502:	77 95       	ror	r23
 504:	67 95       	ror	r22
 506:	b7 95       	ror	r27
 508:	f7 95       	ror	r31
 50a:	e7 95       	ror	r30
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	c1 f7       	brne	.-16     	; 0x500 <__mulsf3_pse+0x8c>
 510:	fe 2b       	or	r31, r30
 512:	88 0f       	add	r24, r24
 514:	91 1d       	adc	r25, r1
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
